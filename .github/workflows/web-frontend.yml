name: Telepesa Web Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Frontend/Web/**'
      - '.github/workflows/web-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Frontend/Web/**'

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('Frontend/Web/customer-app/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Debug workspace
      run: |
        echo "🔍 Current directory: $(pwd)"
        echo "📂 Workspace contents:"
        find . -name "package.json" -type f | head -5
        ls -la Frontend/Web/customer-app/ || echo "❌ customer-app directory not found"
        
    - name: Install dependencies
      working-directory: Frontend/Web/customer-app
      run: |
        echo "📝 Installing dependencies..."
        echo "🔍 Current working directory: $(pwd)"
        echo "📂 Package files:"
        ls -la package*.json || echo "Package files not found"
        
        # Use npm ci for clean, reproducible installs
        echo "✅ Running npm ci..."
        npm ci --prefer-offline

    - name: Verify installation
      working-directory: Frontend/Web/customer-app
      run: |
        echo "🔍 Verifying installation..."
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
        echo "Node modules exists: $(test -d node_modules && echo 'YES' || echo 'NO')"
        echo "Dependencies count: $(ls node_modules | wc -l | xargs)"
        echo "✅ Installation verified"

    - name: Run linting
      working-directory: Frontend/Web/customer-app
      run: npm run lint

    - name: Run prettier check
      working-directory: Frontend/Web/customer-app
      run: npm run format

    - name: Run unit tests
      working-directory: Frontend/Web/customer-app
      run: npm run test:run

    - name: Run tests with coverage
      working-directory: Frontend/Web/customer-app
      continue-on-error: true
      run: npm run test:coverage

    - name: Build application
      working-directory: Frontend/Web/customer-app
      run: npm run build

    - name: Debug coverage files
      working-directory: Frontend/Web/customer-app
      run: |
        echo "📊 Checking coverage files..."
        if [ -d "coverage" ]; then
          echo "✅ Coverage directory exists"
          ls -la coverage/
          echo "📄 LCOV file contents preview:"
          head -20 coverage/lcov.info 2>/dev/null || echo "❌ lcov.info not found"
        else
          echo "❌ Coverage directory not found"
          echo "📂 Current directory contents:"
          ls -la
        fi

    - name: Upload test coverage
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: Frontend/Web/customer-app/coverage
        files: Frontend/Web/customer-app/coverage/lcov.info
        flags: frontend
        name: codecov-frontend
        fail_ci_if_error: false
        verbose: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: Frontend/Web/customer-app/dist/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: build-check/

    - name: Verify build output
      run: |
        echo "🔍 Checking build artifacts..."
        if [ -f "build-check/index.html" ]; then
          echo "✅ index.html found"
        else
          echo "❌ index.html not found"
          exit 1
        fi
        
        if ls build-check/assets/*.js 1> /dev/null 2>&1; then
          echo "✅ JavaScript assets found"
        else
          echo "❌ JavaScript assets not found"
          exit 1
        fi
        
        if ls build-check/assets/*.css 1> /dev/null 2>&1; then
          echo "✅ CSS assets found"
        else
          echo "❌ CSS assets not found"
          exit 1
        fi

    - name: Bundle size check
      run: |
        echo "📊 Checking bundle sizes..."
        JS_SIZE=$(find build-check/assets -name "*.js" -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
        CSS_SIZE=$(find build-check/assets -name "*.css" -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
        
        JS_SIZE_MB=$((JS_SIZE / 1024 / 1024))
        CSS_SIZE_KB=$((CSS_SIZE / 1024))
        
        echo "JavaScript bundle size: ${JS_SIZE_MB} MB"
        echo "CSS bundle size: ${CSS_SIZE_KB} KB"
        
        # Warn if JS bundle is too large (>5MB is excessive for a web app)
        if [ $JS_SIZE_MB -gt 5 ]; then
          echo "⚠️ JavaScript bundle is quite large (${JS_SIZE_MB}MB). Consider code splitting."
        else
          echo "✅ JavaScript bundle size is acceptable"
        fi

    - name: Set up Node.js for security audit
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache npm dependencies for security audit
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('Frontend/Web/customer-app/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies for security audit
      working-directory: Frontend/Web/customer-app
      run: |
        echo "🔒 Installing dependencies for security audit..."
        # Clean install for security audit
        npm ci --prefer-offline

    - name: Security audit
      working-directory: Frontend/Web/customer-app
      continue-on-error: true
      run: |
        echo "🔒 Running security audit..."
        npm audit --audit-level=moderate || echo "⚠️ Security vulnerabilities found - please review"

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: Frontend/Web/customer-app/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Check Docker Hub credentials
      id: docker-check
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "has_credentials=false" >> $GITHUB_OUTPUT
          echo "🔍 No Docker Hub credentials found - will build locally only"
        else
          echo "has_credentials=true" >> $GITHUB_OUTPUT
          echo "🔍 Docker Hub credentials found - will build and push"
        fi

    - name: Log in to Docker Hub
      if: steps.docker-check.outputs.has_credentials == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      working-directory: Frontend/Web/customer-app
      run: |
        echo "🐳 Building Docker image for web frontend..."
        
        # Create Dockerfile if it doesn't exist
        if [ ! -f "Dockerfile" ]; then
          cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        
        # Copy built assets
        COPY dist/ /usr/share/nginx/html/
        
        # Copy nginx config
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        
        EXPOSE 80
        
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
          # Create nginx config
          cat > nginx.conf << 'EOF'
        server {
            listen 80;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
        
            # Enable gzip compression
            gzip on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
            # Handle client-side routing
            location / {
                try_files $uri $uri/ /index.html;
            }
        
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, no-transform";
            }
        }
        EOF
        fi
        
        if [ "${{ steps.docker-check.outputs.has_credentials }}" == "true" ]; then
          docker build -t ${{ secrets.DOCKER_USERNAME }}/telepesa-web-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/telepesa-web-frontend:latest
        else
          docker build -t telepesa-web-frontend:latest .
        fi

    - name: Docker build status
      run: |
        if [ "${{ steps.docker-check.outputs.has_credentials }}" == "true" ]; then
          echo "🐳 Frontend Docker image built and pushed to Docker Hub successfully!"
          echo "📦 Image: ${{ secrets.DOCKER_USERNAME }}/telepesa-web-frontend:latest"
        else
          echo "🐳 Frontend Docker image built successfully (local only)"
          echo "💡 To enable Docker Hub push, configure these repository secrets:"
          echo "   - DOCKER_USERNAME: Your Docker Hub username"
          echo "   - DOCKER_PASSWORD: Your Docker Hub password or access token"
        fi

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: preview/

    - name: Deploy to preview (placeholder)
      run: |
        echo "🚀 Would deploy to preview environment..."
        echo "📁 Build artifacts ready in preview/ directory"
        echo "🔗 Preview URL would be: https://preview-pr-${{ github.event.number }}.telepesa.com"
        # In a real scenario, you would deploy to a preview environment here
        # For example, to Vercel, Netlify, or your own staging server

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test-and-build, quality-gate]
    if: always()

    steps:
    - name: Notify Success
      if: needs.test-and-build.result == 'success' && needs.quality-gate.result == 'success'
      run: |
        echo "🎉 Frontend CI Pipeline completed successfully!"
        echo "✅ All tests passed"
        echo "✅ Build successful"
        echo "✅ Quality gate passed"
        echo "✅ Bundle size acceptable"
        echo "🚀 Ready for deployment"

    - name: Notify Failure
      if: needs.test-and-build.result == 'failure' || needs.quality-gate.result == 'failure'
      run: |
        echo "❌ Frontend CI Pipeline failed!"
        echo "Test & Build result: ${{ needs.test-and-build.result }}"
        echo "Quality Gate result: ${{ needs.quality-gate.result }}"
        exit 1
