{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "Telepesa Banking Platform API",
		"description": "Comprehensive API collection for Telepesa Banking Platform with automated tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "1. Health & Infrastructure",
			"item": [
				{
					"name": "Health Check - User Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Service status is UP\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"});",
									"",
									"pm.test(\"Response has required health components\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"components\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Documentation - OpenAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is valid OpenAPI spec\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"openapi\");",
									"    pm.expect(jsonData).to.have.property(\"info\");",
									"    pm.expect(jsonData).to.have.property(\"paths\");",
									"});",
									"",
									"pm.test(\"API title contains 'User Service'\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.info.title).to.include(\"User Service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v3/api-docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v3",
								"api-docs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. User Registration",
			"item": [
				{
					"name": "Register Valid User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique user data",
									"const timestamp = Date.now();",
									"pm.globals.set(\"test_username\", \"testuser\" + timestamp);",
									"pm.globals.set(\"test_email\", \"testuser\" + timestamp + \"@telepesa.com\");",
									"pm.globals.set(\"test_phone\", \"+254700\" + timestamp.toString().slice(-6));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"username\");",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.username).to.eql(pm.globals.get(\"test_username\"));",
									"    pm.expect(jsonData.email).to.eql(pm.globals.get(\"test_email\"));",
									"});",
									"",
									"pm.test(\"User status is PENDING_VERIFICATION\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"PENDING_VERIFICATION\");",
									"});",
									"",
									"pm.test(\"Password is not returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.have.property(\"password\");",
									"});",
									"",
									"pm.test(\"Response has timestamps\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
									"});",
									"",
									"// Store user ID for later tests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set(\"test_user_id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"password\": \"SecureP@ssw0rd123!\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"phoneNumber\": \"{{test_phone}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User - Weak Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Validation\");",
									"    pm.expect(jsonData).to.have.property(\"validationErrors\");",
									"});",
									"",
									"pm.test(\"Password validation error present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.validationErrors).to.have.property(\"password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"weakuser\",\n    \"email\": \"weak@telepesa.com\",\n    \"password\": \"123\",\n    \"firstName\": \"Weak\",\n    \"lastName\": \"Password\",\n    \"phoneNumber\": \"+254700123457\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User - Duplicate Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response contains duplicate error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Duplicate\");",
									"    pm.expect(jsonData.message).to.include(\"already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"different@telepesa.com\",\n    \"password\": \"SecureP@ssw0rd123!\",\n    \"firstName\": \"Duplicate\",\n    \"lastName\": \"Username\",\n    \"phoneNumber\": \"+254700123458\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email validation error present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.validationErrors).to.have.property(\"email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"invalidemailuser\",\n    \"email\": \"invalid-email-format\",\n    \"password\": \"SecureP@ssw0rd123!\",\n    \"firstName\": \"Invalid\",\n    \"lastName\": \"Email\",\n    \"phoneNumber\": \"+254700123460\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. User Authentication",
			"item": [
				{
					"name": "Login - Pending Verification (Expected Failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Bad\");",
									"    pm.expect(jsonData.message).to.include(\"not active\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernameOrEmail\": \"{{test_username}}\",\n    \"password\": \"SecureP@ssw0rd123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Bad\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernameOrEmail\": \"{{test_username}}\",\n    \"password\": \"WrongPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Non-existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response contains user not found error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"User Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernameOrEmail\": \"nonexistentuser\",\n    \"password\": \"SecureP@ssw0rd123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Protected Endpoints (Authorization)",
			"item": [
				{
					"name": "Get User by ID - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"firstName\": \"Updated\",\n    \"lastName\": \"User\",\n    \"phoneNumber\": \"{{test_phone}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Security & Error Handling",
			"item": [
				{
					"name": "Malformed JSON Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains JSON error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"JSON\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ invalid json"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415 or 400\", function () {",
									"    pm.expect([400, 415]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Response contains content type error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.be.oneOf([",
									"        \"Unsupported Media Type\",",
									"        \"Bad Request\"",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "invalid content"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Not Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Response contains method not allowed error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Method Not Allowed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@telepesa.com\",\n    \"password\": \"SecureP@ssw0rd123!\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"phoneNumber\": \"+254700123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CORS headers are present\", function () {",
									"    pm.expect(pm.response.headers.has('Access-Control-Allow-Origin')).to.be.true;",
									"});",
									"",
									"pm.test(\"Security headers are present\", function () {",
									"    const headers = pm.response.headers;",
									"    const hasSecurityHeaders = ",
									"        headers.has('X-Content-Type-Options') ||",
									"        headers.has('X-Frame-Options') ||",
									"        headers.has('Cache-Control');",
									"    pm.expect(hasSecurityHeaders).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "POST"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Rate Limiting",
			"item": [
				{
					"name": "Rate Limiting Test - Multiple Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This test may pass with 401 (normal failure) or 429 (rate limited)",
									"pm.test(\"Status code is 401 or 429\", function () {",
									"    pm.expect([401, 429]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 429) {",
									"    pm.test(\"Rate limiting is working\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.error).to.include(\"Too Many Requests\");",
									"    });",
									"} else {",
									"    pm.test(\"Normal authentication failure\", function () {",
									"        pm.expect(pm.response.code).to.eql(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernameOrEmail\": \"{{test_username}}\",\n    \"password\": \"WrongPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default base URL if not already set",
					"if (!pm.globals.has('base_url')) {",
					"    pm.globals.set('base_url', 'http://localhost:8081');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response structure",
					"pm.test(\"Response has timestamp\", function () {",
					"    if (pm.response.json() && pm.response.json().timestamp) {",
					"        pm.expect(pm.response.json().timestamp).to.exist;",
					"    }",
					"});",
					"",
					"// Log request details for debugging",
					"console.log(`${pm.info.requestName}: ${pm.response.code} ${pm.response.status} (${pm.response.responseTime}ms)`);",
					"",
					"// Track test results",
					"if (pm.response.code >= 400) {",
					"    console.log(`Error Response: ${JSON.stringify(pm.response.json(), null, 2)}`);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "test_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_phone",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_user_id",
			"value": "",
			"type": "string"
		}
	]
} 