name: React Dashboard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Frontend/Dashboard/**'
      - '.github/workflows/frontend-dashboard.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Frontend/Dashboard/**'

jobs:
  test-and-build:
    name: Test & Build React Dashboard
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/Dashboard/package-lock.json

    - name: Install dependencies
      working-directory: Frontend/Dashboard
      run: npm ci

    - name: Run linting
      working-directory: Frontend/Dashboard
      run: npm run lint

    - name: Run type checking
      working-directory: Frontend/Dashboard
      run: npm run type-check

    - name: Run unit tests
      working-directory: Frontend/Dashboard
      run: npm run test:ci

    - name: Run integration tests
      working-directory: Frontend/Dashboard
      run: npm run test:integration

    - name: Build for production
      working-directory: Frontend/Dashboard
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-build
        path: Frontend/Dashboard/build/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/Dashboard/package-lock.json

    - name: Install dependencies
      working-directory: Frontend/Dashboard
      run: npm ci

    - name: Run ESLint with detailed report
      working-directory: Frontend/Dashboard
      run: |
        npm run lint -- --format html --output-file build/eslint-report.html || true

    - name: Run Prettier check
      working-directory: Frontend/Dashboard
      run: npm run format:check

    - name: Generate code coverage
      working-directory: Frontend/Dashboard
      run: npm run test:coverage

    - name: Run bundle analysis
      working-directory: Frontend/Dashboard
      run: npm run build:analyze

    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dashboard-code-quality
        path: |
          Frontend/Dashboard/build/eslint-report.html
          Frontend/Dashboard/coverage/
          Frontend/Dashboard/build/analyze/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/Dashboard/package-lock.json

    - name: Install dependencies
      working-directory: Frontend/Dashboard
      run: npm ci

    - name: Run npm audit
      working-directory: Frontend/Dashboard
      run: |
        npm audit --audit-level=moderate --json > build/audit-report.json || true

    - name: Run Snyk security scan
      working-directory: Frontend/Dashboard
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        npx snyk test --json-file-output=build/snyk-report.json || true

    - name: Run dependency vulnerability scan
      working-directory: Frontend/Dashboard
      run: |
        npm audit --audit-level=high || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dashboard-security-reports
        path: |
          Frontend/Dashboard/build/audit-report.json
          Frontend/Dashboard/build/snyk-report.json

  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/Dashboard/package-lock.json

    - name: Install dependencies
      working-directory: Frontend/Dashboard
      run: npm ci

    - name: Build for testing
      working-directory: Frontend/Dashboard
      run: npm run build

    - name: Start development server
      working-directory: Frontend/Dashboard
      run: |
        npm run start &
        sleep 30

    - name: Run accessibility tests
      working-directory: Frontend/Dashboard
      run: |
        npm run test:a11y

    - name: Upload accessibility reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dashboard-accessibility
        path: Frontend/Dashboard/build/a11y-report.html

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-and-build, code-quality, security-scan, accessibility-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download code quality reports
      uses: actions/download-artifact@v4
      with:
        name: dashboard-code-quality
        path: dashboard-code-quality/

    - name: Download security reports
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: dashboard-security-reports
        path: dashboard-security-reports/

    - name: Download accessibility reports
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: dashboard-accessibility
        path: dashboard-accessibility/

    - name: Check test results
      run: |
        echo "üîç Checking React Dashboard test results..."
        if [ -d "dashboard-code-quality/coverage" ]; then
          echo "‚úÖ Code coverage report found"
        else
          echo "‚ö†Ô∏è Code coverage report not found"
        fi

    - name: Check lint results
      run: |
        echo "üîç Checking React Dashboard lint results..."
        if [ -f "dashboard-code-quality/eslint-report.html" ]; then
          echo "‚úÖ ESLint report found"
        else
          echo "‚ö†Ô∏è ESLint report not found"
        fi

    - name: Check security scan results
      run: |
        echo "üîí Checking React Dashboard security scan results..."
        if [ -f "dashboard-security-reports/audit-report.json" ]; then
          echo "‚úÖ NPM audit report found"
        else
          echo "‚ö†Ô∏è NPM audit report not found"
        fi
        
        if [ -f "dashboard-security-reports/snyk-report.json" ]; then
          echo "‚úÖ Snyk security report found"
        else
          echo "‚ö†Ô∏è Snyk security report not found"
        fi

    - name: Check accessibility results
      run: |
        echo "‚ôø Checking React Dashboard accessibility results..."
        if [ -f "dashboard-accessibility/a11y-report.html" ]; then
          echo "‚úÖ Accessibility report found"
        else
          echo "‚ö†Ô∏è Accessibility report not found"
        fi

    - name: Quality gate passed
      run: echo "All React Dashboard quality checks passed!"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-build
        path: Frontend/Dashboard/build/

    - name: Deploy to Vercel (Preview)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: Frontend/Dashboard
        vercel-args: '--prod'

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test-and-build, code-quality, security-scan, accessibility-test, quality-gate]
    if: always()

    steps:
    - name: Notify Success
      if: needs.test-and-build.result == 'success' && needs.code-quality.result == 'success'
      run: |
        echo "üéâ React Dashboard CI Pipeline completed successfully!"
        echo "‚úÖ All tests passed"
        echo "‚úÖ Build successful"
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ Security scan completed"
        echo "‚úÖ Accessibility tests passed"
        echo "‚úÖ Quality gate passed"
        echo "üåê Dashboard build artifacts generated"

    - name: Notify Failure
      if: needs.test-and-build.result == 'failure' || needs.code-quality.result == 'failure'
      run: |
        echo "‚ùå React Dashboard CI Pipeline failed!"
        echo "Test result: ${{ needs.test-and-build.result }}"
        echo "Code quality result: ${{ needs.code-quality.result }}"
        echo "Security scan result: ${{ needs.security-scan.result }}"
        echo "Accessibility test result: ${{ needs.accessibility-test.result }}"
        echo "Quality gate result: ${{ needs.quality-gate.result }}"
        exit 1 