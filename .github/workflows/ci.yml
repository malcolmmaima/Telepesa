name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: telepesa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Test User Service
    - name: Run User Service Tests
      run: |
        cd Backend/user-service
        mvn clean test jacoco:report
      env:
        SPRING_PROFILES_ACTIVE: test

    # Test Shared Libraries
    - name: Run Shared Libraries Tests
      run: |
        cd Backend/shared-libraries
        mvn clean test jacoco:report || true
      env:
        SPRING_PROFILES_ACTIVE: test

    # Test Coverage Check
    - name: Check Test Coverage
      run: |
        cd Backend/user-service
        mvn jacoco:check
      env:
        SPRING_PROFILES_ACTIVE: test

    # Upload Coverage Reports
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: |
          Backend/user-service/target/site/jacoco/jacoco.xml
          Backend/shared-libraries/*/target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # Generate Coverage Report Artifact
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          Backend/user-service/target/site/jacoco/
          Backend/shared-libraries/*/target/site/jacoco/

    # Upload Surefire Test Results
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          Backend/user-service/target/surefire-reports/
          Backend/shared-libraries/*/target/surefire-reports/

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build User Service
      run: |
        cd Backend/user-service
        mvn clean compile package -DskipTests

    - name: Build Shared Libraries
      run: |
        cd Backend/shared-libraries
        mvn clean compile package -DskipTests

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          Backend/user-service/target/*.jar
          Backend/shared-libraries/*/target/*.jar

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run OWASP Dependency Check
      run: |
        cd Backend/user-service
        mvn org.owasp:dependency-check-maven:check || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          Backend/user-service/target/dependency-check-report.html

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: telepesa_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: Backend/

    - name: Run Integration Tests
      run: |
        cd Backend/user-service
        mvn test -Dtest="**/*IntegrationTest" || true
      env:
        SPRING_PROFILES_ACTIVE: integration
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: telepesa_integration
        DB_USERNAME: testuser
        DB_PASSWORD: testpassword

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Download Coverage Reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        path: coverage/

    - name: Download Test Results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: test-results/

    - name: Quality Gate Check
      run: |
        echo "=== QUALITY GATE RESULTS ==="
        
        # Check if coverage reports exist
        if [ -f "coverage/jacoco.xml" ]; then
          echo "✅ Coverage report generated"
          
          # Extract coverage percentage (simplified)
          COVERAGE=$(grep -o 'covered="[0-9]*"' coverage/jacoco.xml | head -1 | grep -o '[0-9]*')
          TOTAL=$(grep -o 'missed="[0-9]*"' coverage/jacoco.xml | head -1 | grep -o '[0-9]*')
          
          if [ ! -z "$COVERAGE" ] && [ ! -z "$TOTAL" ]; then
            PERCENTAGE=$((COVERAGE * 100 / (COVERAGE + TOTAL)))
            echo "📊 Test Coverage: ${PERCENTAGE}%"
            
            if [ $PERCENTAGE -lt 75 ]; then
              echo "❌ Coverage below 75% threshold"
              exit 1
            else
              echo "✅ Coverage meets threshold"
            fi
          fi
        else
          echo "⚠️ No coverage report found"
        fi
        
        # Check test results
        if find test-results/ -name "*.xml" -type f | grep -q .; then
          echo "✅ Test results found"
          
          # Count failures/errors
          FAILURES=$(find test-results/ -name "*.xml" -exec grep -l 'failures="[1-9]' {} \; | wc -l)
          ERRORS=$(find test-results/ -name "*.xml" -exec grep -l 'errors="[1-9]' {} \; | wc -l)
          
          if [ $FAILURES -gt 0 ] || [ $ERRORS -gt 0 ]; then
            echo "❌ Test failures or errors detected"
            exit 1
          else
            echo "✅ All tests passed"
          fi
        else
          echo "⚠️ No test results found"
        fi
        
        echo "=== QUALITY GATE PASSED ==="

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build User Service Docker Image
      run: |
        cd Backend/user-service
        docker build -t telepesa/user-service:latest -t telepesa/user-service:${{ github.sha }} .

    - name: Save Docker Images
      run: |
        docker save telepesa/user-service:latest | gzip > user-service-image.tar.gz

    - name: Upload Docker Images
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: "*.tar.gz"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, integration-test]
    if: always()

    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "🎉 CI Pipeline completed successfully!"
        echo "✅ All tests passed"
        echo "✅ Build successful"
        echo "✅ Security scan completed"

    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ CI Pipeline failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Build result: ${{ needs.build.result }}"
        echo "Security scan result: ${{ needs.security-scan.result }}"
        exit 1 